#!/usr/bin/env node

import minimist from 'minimist';
import { FileToCreateType, setupTestFiles } from './feature/__tests__/prepareFileForTests';
import { createPath } from './util/createPath';
import { Args } from '@/feature/args/args';
import { buildFromConfig } from '@/feature/buildFromConfig';
import { cleanUp } from '@/feature/cleanUp';
import { cleanUpBeforeUpdate } from '@/feature/cleanUpBeforeUpdate';
import { cleanUpFileTree } from '@/feature/cleanUpFileTree';
import { getConfig } from '@/feature/config/defaultConfig';
import { ConfigType } from '@/feature/config/types';
import { downloadConfig } from '@/feature/downloadConfig';
import { prepareBaseSnpFileMap } from '@/feature/prepareBaseFile';
import { scanExtraFile } from '@/feature/scanExtraFile';
import { createCatalog } from '@/util/createCatalog';
import { debugFunction } from '@/util/debugFunction';

export const update = async (args: Args): Promise<ConfigType> => {
  const config = await getConfig(args);

  if (!config.snpFileMapConfig) {
    throw new Error('Config file not exists, use init script');
  }

  if (process.env.SDEBUG == 'true') {
    const FileToCreate: FileToCreateType[] = [
      {
        filePath: createPath([config.projectCatalog, 'README.md']),
        content: '# mockTemplateToUpdate\n\nThis repository is used to test the s-prepare-template command.\n',
      },
      {
        filePath: createPath([config.projectCatalog, 'tsConfig.json']),
        content: '{\n  "compilerOptions": {\n    "lib": ["ES2022"]\n  },\n  "exclude": ["node_modules"]\n}',
      },
      {
        filePath: createPath([config.projectCatalog, 'yarn.lock']),
        content:
          '# THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.\n' +
          '# yarn lockfile v1\n' +
          '\n' +
          'ajv@^5.1.0:\n' +
          '  version "5.5.2"\n' +
          '  resolved "https://registry.yarnpkg.com/ajv/-/ajv-5.5.2.tgz#73b5eeca3fab653e3d3f9422b341ad42205dc965"\n' +
          '  integrity sha512-Ajr4IcMXq/2QmMkEmSvxqfLN5zGmJ92gHXAeOXq1OekoH2rfDNsgdDoL2f7QaRCy7G/E6TpxBVdRuNraMztGHw==',
      },
    ];
    setupTestFiles(FileToCreate, config.isDebug);
  }

  debugFunction(config.isDebug, '=== Start SNP UPDATE ===');

  return await createCatalog(config.temporaryFolder).then(() => {
    return { ...config };
  });
};

const args: Args = minimist(process.argv.slice(2));

let finalConfig = {
  isDebug: false,
};

update(args)
  .then((config) => {
    finalConfig = config;
    return cleanUpBeforeUpdate(config);
  })
  .then(({ config }) => {
    finalConfig = config;
    return downloadConfig(config);
  })
  .then(({ config }) => {
    finalConfig = config;
    return cleanUpFileTree(config);
  })
  .then((config) => {
    finalConfig = config;
    return prepareBaseSnpFileMap(config);
  })
  .then(({ config }) => {
    finalConfig = config;
    return scanExtraFile(config);
  })
  .then(({ config }) => {
    finalConfig = config;
    return buildFromConfig(config);
  })
  .then(({ config }) => {
    finalConfig = config;
    return cleanUp(config);
  })
  .finally(() => {
    debugFunction(finalConfig?.isDebug, { finalConfig }, '[UPDATE] final config');
    debugFunction(finalConfig?.isDebug, '=== final SNP UPDATE ===');
  });
